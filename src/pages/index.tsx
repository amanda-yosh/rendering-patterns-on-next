import Head from "next/head";
import Link from "next/link";
import Image from "next/image";

import Title from "@/components/Title";
import ImageWrapper from "@/components/ImageWrapper";

import domTree from '@/assets/home/dom_tree.webp'
import questionGirl from '@/assets/home/question-girl.jpeg';
import browserRender from '@/assets/home/how-browsers-render-web-pages.png'
import cdnDistributedMap from '@/assets/home/what_is_a_cdn_distributed_server_map.png'

import { routes } from "@/utils/routes";

import pagesStyles from '@/styles/Pages.module.css'
import styles from "@/styles/Home.module.css";

export default function Home() {
  return (
    <>
      <Head>
        <title>Padrões de Renderização | Rendering Patterns</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={pagesStyles.page}>
        <main className={pagesStyles.main}>
          <Title borderBlack>Padrões de Renderização | Rendering Patterns</Title>

          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px' }}>
            <Image
              aria-hidden
              src={questionGirl}
              alt="File icon"
              width={180}
              height={180}
            />
            <h2 style={{ lineHeight: '2rem' }}>
              Onde & <br />
              Quando o conteúdo deve ser renderizado?
            </h2>
          </div>

          <section className={pagesStyles.section}>
            <p>
              Durante o desenvolvimento web, um questionamento crucial é: &quot;Onde e quando o conteúdo deve ser renderizado&quot;
              <br />
              As opções — servidor, build ou cliente — influenciam a performance e a experiência do usuário, e a renderização pode ser feita de uma vez, em partes ou progressivamente.
            </p>

            <p>
              A escolha vai depender do caso de uso e irá pesar tanto para o time de desenvolvimento, que utilizará as ferramentas de engenharia para construir a aplicação, quanto para o usuário final, que terá a experiência de utilizar a aplicação.
            </p>

            <p>
              A escolha correta para cada caso de uso pode levar a builds mais rápidos e uma melhor performance a um baixo custo de processamento. Entretanto, a escolha errada pode matar uma aplicação.
            </p>

            <p>
              Aqui, o objetivo é entender os padrões de renderização para colocá-los em desenvolvimento da forma mais certeira possível. Utilizaremos uma <Link href='https://github.com/amanda-yosh/rendering-patterns-on-next' className={styles.focus}>aplicação em Next.js</Link>, que é exatamente este site que você lê, para entender e colocar em prática estes padrões.
            </p>

            <p>
              Mas antes de prosseguir, vamos entender ou relembrar como é feita a renderização de uma página web e o que são CDNs e redes de borda (Edge).
            </p>

          </section>

          <section className={pagesStyles.section}>
            <h2 style={{ border: '2px solid #000', padding: '12px' }}>Como navegadores renderizam páginas web</h2>

            <p>
              Tudo começa com a requisição do usuário. A partir dela o navegador envia uma solicitação HTTP ao servidor para obter o HTML da página desejada.
              O servidor retorna esse HTML e com ele o navegador começa a analisar (parsing) o conteúdo e construir a árvore <a href="https://medium.com/allbarbos/dom-b9c308d398b0">DOM (Document Object Model)</a> que representa a estrutura do documento.
            </p>

            <ImageWrapper
              image={domTree}
              source='https://medium.com/allbarbos/dom-b9c308d398b0'
            />

            <p>
              Durante o parsing, o navegador identifica e solicita recursos adicionais, como CSS, JavaScript, imagens, e cada um desses recursos pode exigir novas requisições HTTP.
              <br />
              O CSS recebido é analisado para criar a árvore de estilos (ou CSSOM - CSS Object Model), que contém as regras de estilo aplicadas aos elementos da árvore DOM.
              <br />
              A partir da combinação da árvore DOM com a árvore de estilos é formada a árvore de renderização que representa quais elementos precisam ser exibidos e como serão estilizados.
            </p>

            <p>
              Assim, o navegador calcula a posição e o tamanho de cada elemento na árvore de renderização num processo chamado de layout (ou reflow). E após o layout, ele pinta (renderiza) os pixels na tela, preenchendo-a com cores, imagens e texto.
              <br />
              Essas etapas ocorrem de forma rápida e muitas vezes em paralelo, permitindo que o navegador mostre a página de maneira eficiente. A otimização de cada uma dessas fases pode impactar a performance e a experiência do usuário.
            </p>

            <ImageWrapper
              width={800}
              image={browserRender}
              source='https://www.cloudflare.com/pt-br/learning/cdn/what-is-a-cdn/'
            />
          </section>

          <section className={pagesStyles.section}>
            <h2 style={{ border: '2px solid #000', padding: '12px' }}>O que é e como funciona uma CDN</h2>

            <p>
              Uma CDN (Content Delivery Network) é uma rede de distribuição de conteúdo.
              <br />
              Um grupo de servidores distribuidos geograficamente que armazenam conteúdo em cache próximo aos usuários finais, acelerando a transferência do conteúdo necessário para carregar a página.
            </p>

            <ImageWrapper
              width={800}
              image={cdnDistributedMap}
              source='https://www.cloudflare.com/pt-br/learning/cdn/what-is-a-cdn/'
            />

            <p>Legal, agora que já revisamos esses pontos, vamos aos padrões de renderização?</p>
          </section>

          <section className={pagesStyles.section}>
            <h2 style={{ border: '2px solid #000', padding: '12px' }}>Padrões de Renderização</h2>

            <div className={styles.ctas}>
              {routes.map(({ href, name }) => (
                <Link href={href} className={styles.ctaLink} key={name}>
                  <Image
                    aria-hidden
                    src="https://nextjs.org/icons/file.svg"
                    alt="File icon"
                    width={16}
                    height={16}
                  />
                  {name}
                </Link>
              ))}
            </div>
          </section>
        </main>
      </div>
    </>
  );
}
