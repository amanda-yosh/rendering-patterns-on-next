import Head from "next/head";
import Image from "next/image";

import VideoWrapper from "@/components/VideoWrapper";
import Resume from "@/components/Resume";
import Title from "@/components/Title";
import Alert from "@/components/Alert";

import img1 from '@/assets/static-rendering/client-cdn-server.png'
import img2 from '@/assets/static-rendering/static-network-and-main-thread.png'

import pagesStyles from '@/styles/Pages.module.css'
import styles from "@/styles/StaticRendering.module.css";
import ImageWrapper from "@/components/ImageWrapper";

export default function StaticRendering() {
    return (
        <>
            <Head>
                <title>Renderização Estática | Static Rendering</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className={pagesStyles.page}>
                <main className={pagesStyles.main}>
                    <Title borderBlack>Esta é uma página que renderiza de forma estática</Title>

                    <section className={pagesStyles.section}>
                        <p>
                            A renderização estática é um padrão (pattern) usado para criar sites rápidos com carregamentos de página quase instantâneos e com pouco ou nenhum conteúdo dinâmico.
                            <br />
                            O <span className={styles.focus}>HTML é gerado no momento do build</span> e não muda até o próximo build.
                            <br />
                            O conteúdo HTML é estático e <span className={styles.focus}>facilmente armazenável em cache (CDN ou uma rede de borda)</span>.
                            <br />
                            Quando um cliente solicita uma página, uma requisição é enviada para o servidor, que a processa, renderiza o conteúdo HTML e responde esta solicitação. Entre o servidor e o cliente, uma CDN pode ser usada para armazenar em cache o conteúdo HTML. Esta configuração reduz o tempo de resposta e o tempo de carregamento da página, pois o servidor não precisa (re)processar a requisição.
                        </p>
                    </section>

                    <div style={{ textAlign: 'center' }}>
                        <Image
                            src={img1}
                            alt=""
                            width={600}
                            height={200}
                            priority
                        />
                    </div>

                    <Alert>
                        <p>
                            <span className={styles.focus}>INDICADO PARA</span> páginas que não mudam com frequência e exibem os mesmos dados, não importa quem os solicite.
                        </p>
                    </Alert>

                    <section className={pagesStyles.section}>
                        <p>
                            A maioria dos sites hoje possuem conteúdos dinâmicos e personalizados, dessa forma, precisamos de variações na forma como é feita a renderização estática para atender aos diferentes casos de uso. Aqui vamos ver a <span className={styles.focus}>renderização estática comum</span>, que é melhor para páginas que não precisam fazer requisição de dados. E a <span className={styles.focus}>renderização estática com Fetch do lado do cliente</span>, que é melhor para páginas que contêm dados que devem ser atualizados em cada carregamento de página e para páginas que contêm componentes de espaço reservado estáveis.
                        </p>
                    </section>

                    <section className={pagesStyles.section}>
                        <h2>Como funciona?</h2>
                        <p>
                            Esta página (que você está lendo) exibe o mesmo conteúdo para todos no mundo. Ela <span className={styles.focus}>não contém dados dinâmicos</span> ou <span className={styles.focus}>conteúdo personalizado</span>.
                            <br />
                            Quando o site é buildado em um host, o HTML é gerado e salvo no armazenamento estático no servidor.
                            <br />
                            Quando um usuário solicita a página, o servidor envia o HTML pré-gerado para o cliente e o armazenada em cache no ponto de borda mais próxima do usuário. O navegador então renderiza o HTML e emprega um pacote JavaScript para hidratar a página, como mostra o vídeo abaixo.
                        </p>
                    </section>

                    <VideoWrapper fileName="video1.webm" source="https://www.patterns.dev/vanilla/rendering-patterns" />

                    <ImageWrapper image={img2} source="https://www.patterns.dev/vanilla/rendering-patterns" />

                    <Resume
                        title='Resumo da Renderização Estática'
                        qualifications={[
                            { name: 'Time To First Byte', score: 'good' },
                            { name: 'First Contentful Paint', score: 'good' },
                            { name: 'Largest Contentful Paint', score: 'good' },
                            { name: 'Time To Interactive', score: 'good' },
                            { name: 'Cumulative Layout Shift', score: 'good' },
                            { name: 'First Input Delay', score: 'good' },
                            { name: 'Fast Build Times', score: 'good' },
                            { name: 'Low Server Costs', score: 'good' },
                            { name: 'Easy Rollbacks', score: 'good' },
                            { name: 'Reliable uptime', score: 'good' },
                            { name: 'Dynamic Content', score: 'warn' },
                            { name: 'Scalable infraestructure', score: 'good' },
                        ]}
                    />

                    <section className={pagesStyles.section}>
                        <p>
                            A renderização estática simples é excelente para desempenho porque resulta em um TTFB extremamente rápido, já que o HTML já está disponível no servidor. O navegador recebe uma resposta mais rápida e pode renderizá-lo rapidamente, resultando em um FCP e LCP rápidos. Como o conteúdo é estático, não há mudança de layout durante a renderização.
                        </p>

                        <p>
                            Esta forma de renderização, em conjunto com uma CDN para cache, ajuda a atingir excelentes valores de Core Web Vitals quando o site não precisa de conteúdo dinâmico ou interação do usuário.
                        </p>
                    </section>
                </main>
            </div>
        </>
    );
}
