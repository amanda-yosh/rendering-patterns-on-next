import Head from "next/head";
import Link from "next/link";
import type {
    InferGetStaticPropsType,
    GetStaticProps,
    GetStaticPaths,
} from 'next'
import { useRouter } from 'next/router';

import Title from "@/components/Title";
import UserCard from "@/components/UserCard";

import pagesStyles from "@/styles/Pages.module.css";
import styles from "@/styles/StaticRendering.module.css";

type GithubUserProps = {
    avatar_url: string;
    name: string;
    location: string;
    bio: string;
    public_repos: number;
    followers: number;
    following: number;
}

export default function IncrementalStaticRegenerationExample({
    githubUser, pageIndex
}: InferGetStaticPropsType<typeof getStaticProps>) {
    const router = useRouter();
    const nextPageIndex = Number(pageIndex) + 1

    return (
        <>
            <Head>
                <title>Exemplo ISR</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className={pagesStyles.page}>
                <main className={pagesStyles.main}>
                    <Title borderBlack>Esta é uma página com ISR</Title>

                    <div className={styles.cardButtonWrapper}>
                        <button
                            onClick={() => router.back()}
                            className={styles.button}
                        >
                            Anterior
                        </button>

                        {githubUser && <UserCard user={githubUser} />}

                        <Link
                            href={`/incremental-static-regeneration/${nextPageIndex}`}
                            className={styles.button}
                        >
                            Próximo
                        </Link>
                    </div>
                </main>
            </div>
        </>
    )
}

export const getStaticPaths = (async () => {
    return {
        paths: [
            { params: { id: '1' } },
            { params: { id: '2' } },
            { params: { id: '3' } },
            { params: { id: '4' } },
        ],
        fallback: true, // o que é
    }
}) satisfies GetStaticPaths

export const getStaticProps = (async (props) => {
    // https://collectionapi.metmuseum.org/public/collection/v1/objects/100

    const pages = [
        { id: 1, name: 'amanda-yosh' },
        { id: 2, name: 'luizastellet' },
        { id: 3, name: 'Narda-Antonella' },
        { id: 4, name: 'jumeneguete' },
    ]

    const pageIndex = pages.find((page) => page.id === Number(props?.params?.id)) || pages[0]

    const res = await fetch(`https://api.github.com/users/${pages[pageIndex.id - 1].name}`)
    const githubUser = await res.json()

    return {
        props: { githubUser, pageIndex: pageIndex.id },
        revalidate: 60,
    }
}) satisfies GetStaticProps<{ githubUser: GithubUserProps }>
